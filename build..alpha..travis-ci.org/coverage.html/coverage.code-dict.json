{"/home/travis/build/npmtest/node-npmtest-speaker/test.js":"/* istanbul instrument in package npmtest_speaker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-speaker/lib.npmtest_speaker.js":"/* istanbul instrument in package npmtest_speaker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_speaker = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_speaker = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-speaker/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-speaker && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_speaker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_speaker\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_speaker.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_speaker.rollup.js'] =\n            local.assetsDict['/assets.npmtest_speaker.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_speaker.__dirname + '/lib.npmtest_speaker.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-speaker/node_modules/speaker/index.js":"\n/**\n * Module dependencies.\n */\n\nvar os = require('os');\nvar debug = require('debug')('speaker');\nvar binding = require('bindings')('binding');\nvar inherits = require('util').inherits;\nvar Writable = require('readable-stream/writable');\n\n// determine the native host endianness, the only supported playback endianness\nvar endianness = 'function' == os.endianness ?\n                 os.endianness() :\n                 'LE'; // assume little-endian for older versions of node.js\n\n/**\n * Module exports.\n */\n\nexports = module.exports = Speaker;\n\n/**\n * Export information about the `mpg123_module_t` being used.\n */\n\nexports.api_version = binding.api_version;\nexports.description = binding.description;\nexports.module_name = binding.name;\n\n/**\n * Returns the `MPG123_ENC_*` constant that corresponds to the given \"format\"\n * object, or `null` if the format is invalid.\n *\n * @param {Object} format - format object with `channels`, `sampleRate`, `bitDepth`, etc.\n * @return {Number} MPG123_ENC_* constant, or `null`\n * @api public\n */\n\nexports.getFormat = function getFormat (format) {\n  var f = null;\n  if (format.bitDepth == 32 && format.float && format.signed) {\n    f = binding.MPG123_ENC_FLOAT_32;\n  } else if (format.bitDepth == 64 && format.float && format.signed) {\n    f = binding.MPG123_ENC_FLOAT_64;\n  } else if (format.bitDepth == 8 && format.signed) {\n    f = binding.MPG123_ENC_SIGNED_8;\n  } else if (format.bitDepth == 8 && !format.signed) {\n    f = binding.MPG123_ENC_UNSIGNED_8;\n  } else if (format.bitDepth == 16 && format.signed) {\n    f = binding.MPG123_ENC_SIGNED_16;\n  } else if (format.bitDepth == 16 && !format.signed) {\n    f = binding.MPG123_ENC_UNSIGNED_16;\n  } else if (format.bitDepth == 24 && format.signed) {\n    f = binding.MPG123_ENC_SIGNED_24;\n  } else if (format.bitDepth == 24 && !format.signed) {\n    f = binding.MPG123_ENC_UNSIGNED_24;\n  } else if (format.bitDepth == 32 && format.signed) {\n    f = binding.MPG123_ENC_SIGNED_32;\n  } else if (format.bitDepth == 32 && !format.signed) {\n    f = binding.MPG123_ENC_UNSIGNED_32;\n  }\n  return f;\n}\n\n/**\n * Returns `true` if the given \"format\" is playable via the \"output module\"\n * that was selected during compilation, or `false` if not playable.\n *\n * @param {Number} format - MPG123_ENC_* format constant\n * @return {Boolean} true if the format is playable, false otherwise\n * @api public\n */\n\nexports.isSupported = function isSupported (format) {\n  if ('number' !== typeof format) format = exports.getFormat(format);\n  return (binding.formats & format) === format;\n}\n\n/**\n * The `Speaker` class accepts raw PCM data written to it, and then sends that data\n * to the default output device of the OS.\n *\n * @param {Object} opts options object\n * @api public\n */\n\nfunction Speaker (opts) {\n  if (!(this instanceof Speaker)) return new Speaker(opts);\n\n  // default lwm and hwm to 0\n  if (!opts) opts = {};\n  if (null == opts.lowWaterMark) opts.lowWaterMark = 0;\n  if (null == opts.highWaterMark) opts.highWaterMark = 0;\n\n  Writable.call(this, opts);\n\n  // chunks are sent over to the backend in \"samplesPerFrame * blockAlign\" size.\n  // this is necessary because if we send too big of chunks at once, then there\n  // won't be any data ready when the audio callback comes (experienced with the\n  // CoreAudio backend)\n  this.samplesPerFrame = 1024;\n\n  // the `audio_output_t` struct pointer Buffer instance\n  this.audio_handle = null;\n\n  // flipped after close() is called, no write() calls allowed after\n  this._closed = false;\n\n  // set PCM format\n  this._format(opts);\n\n  // bind event listeners\n  this._format = this._format.bind(this);\n  this.on('finish', this._flush);\n  this.on('pipe', this._pipe);\n  this.on('unpipe', this._unpipe);\n}\ninherits(Speaker, Writable);\n\n/**\n * Calls the audio backend's `open()` function, and then emits an \"open\" event.\n *\n * @api private\n */\n\nSpeaker.prototype._open = function () {\n  debug('open()');\n  if (this.audio_handle) {\n    throw new Error('_open() called more than once!');\n  }\n  // set default options, if not set\n  if (null == this.channels) {\n    debug('setting default %o: %o', 'channels', 2);\n    this.channels = 2;\n  }\n  if (null == this.bitDepth) {\n    var depth = this.float ? 32 : 16;\n    debug('setting default %o: %o', 'bitDepth', depth);\n    this.bitDepth = depth;\n  }\n  if (null == this.sampleRate) {\n    debug('setting default %o: %o', 'sampleRate', 44100);\n    this.sampleRate = 44100;\n  }\n  if (null == this.signed) {\n    debug('setting default %o: %o', 'signed', this.bitDepth != 8);\n    this.signed = this.bitDepth != 8;\n  }\n\n  var format = exports.getFormat(this);\n  if (null == format) {\n    throw new Error('invalid PCM format specified');\n  }\n\n  if (!exports.isSupported(format)) {\n    throw new Error('specified PCM format is not supported by \"' + binding.name + '\" backend');\n  }\n\n  // calculate the \"block align\"\n  this.blockAlign = this.bitDepth / 8 * this.channels;\n\n  // initialize the audio handle\n  // TODO: open async?\n  this.audio_handle = new Buffer(binding.sizeof_audio_output_t);\n  var r = binding.open(this.audio_handle, this.channels, this.sampleRate, format);\n  if (0 !== r) {\n    throw new Error('open() failed: ' + r);\n  }\n\n  this.emit('open');\n  return this.audio_handle;\n};\n\n/**\n * Set given PCM formatting options. Called during instantiation on the passed in\n * options object, on the stream given to the \"pipe\" event, and a final time if\n * that stream emits a \"format\" event.\n *\n * @param {Object} opts\n * @api private\n */\n\nSpeaker.prototype._format = function (opts) {\n  debug('format(object keys = %o)', Object.keys(opts));\n  if (null != opts.channels) {\n    debug('setting %o: %o', 'channels', opts.channels);\n    this.channels = opts.channels;\n  }\n  if (null != opts.bitDepth) {\n    debug('setting %o: %o', \"bitDepth\", opts.bitDepth);\n    this.bitDepth = opts.bitDepth;\n  }\n  if (null != opts.sampleRate) {\n    debug('setting %o: %o', \"sampleRate\", opts.sampleRate);\n    this.sampleRate = opts.sampleRate;\n  }\n  if (null != opts.float) {\n    debug('setting %o: %o', \"float\", opts.float);\n    this.float = opts.float;\n  }\n  if (null != opts.signed) {\n    debug('setting %o: %o', \"signed\", opts.signed);\n    this.signed = opts.signed;\n  }\n  if (null != opts.samplesPerFrame) {\n    debug('setting %o: %o', \"samplesPerFrame\", opts.samplesPerFrame);\n    this.samplesPerFrame = opts.samplesPerFrame;\n  }\n  if (null == opts.endianness || endianness == opts.endianness) {\n    // no \"endianness\" specified or explicit native endianness\n    this.endianness = endianness;\n  } else {\n    // only native endianness is supported...\n    this.emit('error', new Error('only native endianness (\"' + endianness + '\") is supported, got \"' + opts.endianness + '\"'));\n  }\n};\n\n/**\n * `_write()` callback for the Writable base class.\n *\n * @param {Buffer} chunk\n * @param {String} encoding\n * @param {Function} done\n * @api private\n */\n\nSpeaker.prototype._write = function (chunk, encoding, done) {\n  debug('_write() (%o bytes)', chunk.length);\n\n  if (this._closed) {\n    // close() has already been called. this should not be called\n    return done(new Error('write() call after close() call'));\n  }\n  var b;\n  var self = this;\n  var left = chunk;\n  var handle = this.audio_handle;\n  if (!handle) {\n    // this is the first time write() is being called; need to _open()\n    try {\n      handle = this._open();\n    } catch (e) {\n      return done(e);\n    }\n  }\n  var chunkSize = this.blockAlign * this.samplesPerFrame;\n\n  function write () {\n    if (self._closed) {\n      debug('aborting remainder of write() call (%o bytes), since speaker is `_closed`', left.length);\n      return done();\n    }\n    b = left;\n    if (b.length > chunkSize) {\n      var t = b;\n      b = t.slice(0, chunkSize);\n      left = t.slice(chunkSize);\n    } else {\n      left = null;\n    }\n    debug('writing %o byte chunk', b.length);\n    binding.write(handle, b, b.length, onwrite);\n  }\n\n  function onwrite (r) {\n    debug('wrote %o bytes', r);\n    if (r != b.length) {\n      done(new Error('write() failed: ' + r));\n    } else if (left) {\n      debug('still %o bytes left in this chunk', left.length);\n      write();\n    } else {\n      debug('done with this chunk');\n      done();\n    }\n  }\n\n  write();\n};\n\n/**\n * Called when this stream is pipe()d to from another readable stream.\n * If the \"sampleRate\", \"channels\", \"bitDepth\", and \"signed\" properties are\n * set, then they will be used over the currently set values.\n *\n * @api private\n */\n\nSpeaker.prototype._pipe = function (source) {\n  debug('_pipe()');\n  this._format(source);\n  source.once('format', this._format);\n};\n\n/**\n * Called when this stream is pipe()d to from another readable stream.\n * If the \"sampleRate\", \"channels\", \"bitDepth\", and \"signed\" properties are\n * set, then they will be used over the currently set values.\n *\n * @api private\n */\n\nSpeaker.prototype._unpipe = function (source) {\n  debug('_unpipe()');\n  source.removeListener('format', this._format);\n};\n\n/**\n * Emits a \"flush\" event and then calls the `.close()` function on\n * this Speaker instance.\n *\n * @api private\n */\n\nSpeaker.prototype._flush = function () {\n  debug('_flush()');\n  this.emit('flush');\n  this.close(false);\n};\n\n/**\n * Closes the audio backend. Normally this function will be called automatically\n * after the audio backend has finished playing the audio buffer through the\n * speakers.\n *\n * @param {Boolean} flush - if `false`, then don't call the `flush()` native binding call. Defaults to `true`.\n * @api public\n */\n\nSpeaker.prototype.close = function (flush) {\n  debug('close(%o)', flush);\n  if (this._closed) return debug('already closed...');\n\n  if (this.audio_handle) {\n    if (false !== flush) {\n      // TODO: async most likely…\n      debug('invoking flush() native binding');\n      binding.flush(this.audio_handle);\n    }\n\n    // TODO: async maybe?\n    debug('invoking close() native binding');\n    binding.close(this.audio_handle);\n    this.audio_handle = null;\n  } else {\n    debug('not invoking flush() or close() bindings since no `audio_handle`');\n  }\n\n  this._closed = true;\n  this.emit('close');\n};\n"}